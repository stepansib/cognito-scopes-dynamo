useDotenv: true
service: cognito-scopes-dynamo-poc

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  - serverless-deployment-bucket
  - serverless-random-gateway-deployment-id
  - serverless-s3-cleaner

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  deploymentBucket:
    name: ${env:SERVICE_PREFIX}-deployment-${aws:region}

custom:
  dotenv:
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - 'aws-sdk'
        - '@aws-sdk/client-dynamodb'
        - '@aws-sdk/lib-dynamodb'
        - '@aws-sdk/client-cognito-identity-provider'
    packager: 'npm'
    keepOutputDirectory: false
  prune:
    automatic: true
    includeLayers: true
    number: 1
  serverless-iam-roles-per-function:
    defaultInherit: true
  serverless-s3-cleaner:
    buckets:
      - ${env:SERVICE_PREFIX}-cloudtrail-trail

functions:
  Bootstrap:
    name: ${env:SERVICE_PREFIX}-bootstrap
    handler: src/bootstrap.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:PutItem
        Resource:
          - Fn::Sub: ${ClientScopesTable.Arn}
      - Effect: Allow
        Action:
          - cognito-idp:DescribeUserPoolClient
        Resource:
          - Fn::Sub: ${UserPool.Arn}
    environment:
      CLIENT_SCOPES_TABLE:
        Fn::Sub: ${ClientScopesTable}
      USER_POOL_ID:
        Fn::Sub: ${UserPool}
      APP_CLIENT_ID:
        Fn::Sub: ${UserPoolClient}
  AppClientUpdatesHandler:
    name: ${env:SERVICE_PREFIX}-app-client-update-handler
    handler: src/app-client-update-handler.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:PutItem
        Resource:
          - Fn::Sub: ${ClientScopesTable.Arn}
    environment:
      CLIENT_SCOPES_TABLE:
        Fn::Sub: ${ClientScopesTable}
      USER_POOL_ID:
        Fn::Sub: ${UserPool}
  Authorizer:
    name: ${env:SERVICE_PREFIX}-authorizer
    handler: src/authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::Sub: ${ClientScopesTable.Arn}
    environment:
      CLIENT_SCOPES_TABLE:
        Fn::Sub: ${ClientScopesTable}
      USER_POOL_ID:
        Fn::Sub: ${UserPool}

resources:
  Resources:
    # Cognito config
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${env:SERVICE_PREFIX}-user-pool
        UsernameAttributes:
          - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Schema:
          - Name: email
            Required: false
        AutoVerifiedAttributes:
          - email
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      DependsOn:
        - UserPool
      Properties:
        UserPoolId:
          Fn::Sub: ${UserPool}
        Domain: ${env:SERVICE_PREFIX}-user-pool
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - ResourceServer
      Properties:
        ClientName: ${env:SERVICE_PREFIX}-app-client
        UserPoolId:
          Fn::Sub: ${UserPool}
        AllowedOAuthFlows:
          - client_credentials
        AllowedOAuthScopes:
          - account/read
          - account/write
        AllowedOAuthFlowsUserPoolClient: true
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: true
        EnableTokenRevocation: true
        PreventUserExistenceErrors: ENABLED
    ResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: account
        Name: ${env:SERVICE_PREFIX}-account
        Scopes:
          - ScopeDescription: Read accounts
            ScopeName: read
          - ScopeDescription: Create/update/delete accounts
            ScopeName: write
        UserPoolId:
          Fn::Sub: ${UserPool}

    # DynamoDB config
    ClientScopesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SERVICE_PREFIX}-client-scopes-policies
        KeySchema:
          - AttributeName: client
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: client
            AttributeType: S
        BillingMode: PAY_PER_REQUEST

    # API config
    ApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${env:SERVICE_PREFIX}-account
        Body: ${file(./api.yaml)}
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGateway
      Properties:
        RestApiId:
          Fn::Sub: ${ApiGateway}
        StageName: ${self:provider.stage}
    AuthorizerLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::Sub: ${AuthorizerLambdaFunction.Arn}
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub: arn:aws:execute-api:${aws:region}:${aws:accountId}:${ApiGateway}/authorizers/*

    # CloudTrail config
    CloudtrailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:SERVICE_PREFIX}-cloudtrail-trail
    CloudtrailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - CloudtrailBucket
      Properties:
        Bucket:
          Fn::Sub: ${CloudtrailBucket}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetBucketAcl
              Effect: Allow
              Resource:
                - arn:aws:s3:::${env:SERVICE_PREFIX}-cloudtrail-trail
              Principal:
                Service:
                  - cloudtrail.amazonaws.com
              Condition:
                StringEquals:
                  aws:SourceArn:
                    Fn::Sub: arn:aws:cloudtrail:${aws:region}:${aws:accountId}:trail/${env:SERVICE_PREFIX}-main
            - Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::${env:SERVICE_PREFIX}-cloudtrail-trail/*
              Principal:
                Service:
                  - cloudtrail.amazonaws.com
              Condition:
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control
                  aws:SourceArn:
                    Fn::Sub: arn:aws:cloudtrail:${aws:region}:${aws:accountId}:trail/${env:SERVICE_PREFIX}-main
    Trail:
      Type: AWS::CloudTrail::Trail
      DependsOn:
        - CloudtrailBucketPolicy
      Properties:
        TrailName: ${env:SERVICE_PREFIX}-main
        IsLogging: true
        IsMultiRegionTrail: false
        IncludeGlobalServiceEvents: true
        S3BucketName:
          Fn::Sub: ${CloudtrailBucket}

    # EventBridge config
    AppClientApiCallRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: 'default'
        EventPattern:
          source:
            - aws.cognito-idp
          detail:
            eventSource:
              - cognito-idp.amazonaws.com
            eventType:
              - AwsApiCall
            eventName:
              - CreateUserPoolClient
              - UpdateUserPoolClient
              - DeleteUserPoolClient
            requestParameters:
              userPoolId:
                - Fn::Sub: ${UserPool}
        Name: ${env:SERVICE_PREFIX}-app-client-api-call-events
        Targets:
          - Id: ${env:SERVICE_PREFIX}-app-client-api-call-subscriber
            Arn:
              Fn::Sub: ${AppClientUpdatesHandlerLambdaFunction.Arn}
    AppClientApiCallSubscriberLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::Sub: ${AppClientUpdatesHandlerLambdaFunction.Arn}
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn:
          Fn::Sub: ${AppClientApiCallRule.Arn}